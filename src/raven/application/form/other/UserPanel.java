/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package raven.application.form.other;

import com.formdev.flatlaf.FlatClientProperties;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import logic.UserService;

/**
 *
 * @author anasj
 */
public class UserPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserPanel
     */
    public UserPanel() {
        initComponents();
        lb.putClientProperty(FlatClientProperties.STYLE, ""
                + "font:$h1.font");
        String[] columnNames = {"ID", "Username", "Role"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false; // Prevents editing but allows selection
            }
        };
        tblUsers.setModel(model);
        tblUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblUsers.setRowSelectionAllowed(true);
        tblUsers.setColumnSelectionAllowed(false);
        // Load data from database when the window opens
        loadUserTable();
    }

    private void loadUserTable() {
        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
        UserService.loadUsers(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        lb = new javax.swing.JLabel();
        btnAddUser = new javax.swing.JButton();
        btnEditUser = new javax.swing.JButton();
        btnDltUser = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Role", "Actions"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsers.setColumnSelectionAllowed(true);
        tblUsers.setName("tblUsers"); // NOI18N
        tblUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblUsers);
        tblUsers.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(3).setResizable(false);
        }

        lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb.setText("User Settings");

        btnAddUser.setText("Add User");
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        btnEditUser.setText("Edit User");
        btnEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditUserActionPerformed(evt);
            }
        });

        btnDltUser.setText("Delete User");
        btnDltUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDltUserActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEditUser)
                .addGap(18, 18, 18)
                .addComponent(btnDltUser, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(252, 252, 252))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddUser, btnDltUser, btnEditUser, btnRefresh});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditUser)
                    .addComponent(btnDltUser)
                    .addComponent(btnRefresh)
                    .addComponent(btnAddUser))
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        // Get user input
        String username = JOptionPane.showInputDialog(this, "Enter username:");
        if (username == null || username.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.");
            return;
        }

        String password = JOptionPane.showInputDialog(this, "Enter password:");
        if (password == null || password.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Password cannot be empty.");
            return;
        }

        String[] roles = {"Admin", "User"}; // Modify roles as per your system
        String role = (String) JOptionPane.showInputDialog(this, "Select role:",
                "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);

        if (role == null) {
            JOptionPane.showMessageDialog(this, "Role selection is required.");
            return;
        }

        // Call UserService to add user
        boolean added = UserService.addUser(username, password, role);

        if (added) {
            JOptionPane.showMessageDialog(this, "User added successfully!");
            UserService.loadUsers((DefaultTableModel) tblUsers.getModel()); // Refresh table
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddUserActionPerformed

    private void btnEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditUserActionPerformed
        int selectedRow = tblUsers.getSelectedRow(); // Get selected row index

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to edit.");
            return;
        }

        // Extract user details
        int userId = (int) tblUsers.getValueAt(selectedRow, 0); // ID (Hidden column)
        String oldUsername = (String) tblUsers.getValueAt(selectedRow, 1); // Existing Username
        String newRole = (String) tblUsers.getValueAt(selectedRow, 2); // Editable Role

        // Get new username from user input
        String newUsername = JOptionPane.showInputDialog(this, "Enter new username:", oldUsername);
        if (newUsername == null || newUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.");
            return;
        }

        // Get new password (optional)
        String newPassword = JOptionPane.showInputDialog(this, "Enter new password (Leave blank to keep current):");

        // If user cancels or doesn't enter a password, keep the old one
        if (newPassword == null || newPassword.trim().isEmpty()) {
            newPassword = "KEEP_OLD"; // Flag to indicate no change
        }

        // Update in database
        boolean updated = UserService.updateUser(userId, newUsername, newPassword, newRole);

        if (updated) {
            JOptionPane.showMessageDialog(this, "User updated successfully!");
            UserService.loadUsers((DefaultTableModel) tblUsers.getModel()); // Refresh table
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditUserActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
        UserService.loadUsers(model);

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDltUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDltUserActionPerformed
        int selectedRow = tblUsers.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a user to delete.");
            return;
        }

        int userId = (int) tblUsers.getValueAt(selectedRow, 0); // Assuming first column is user ID
        int confirm = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete this user?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            if (UserService.deleteUser(userId)) {
                JOptionPane.showMessageDialog(null, "User deleted successfully.");
                DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
                model.removeRow(selectedRow); // Correct way to remove row from table
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete user.");
            }
        }
    }//GEN-LAST:event_btnDltUserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnDltUser;
    private javax.swing.JButton btnEditUser;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb;
    private javax.swing.JTable tblUsers;
    // End of variables declaration//GEN-END:variables
}
