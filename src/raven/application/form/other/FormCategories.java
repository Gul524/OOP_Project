/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package raven.application.form.other;

import com.formdev.flatlaf.FlatClientProperties;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import models.Category;
import logic.ApiClient;
import java.util.ArrayList;
import java.util.List;
import data.ProductData;
/**
 *
 * @author anasj
 */
public class FormCategories extends javax.swing.JPanel {

    private DefaultTableModel tableModel;

    /**
     * Creates new form FormCategories
     */
    public FormCategories() {
        initComponents();
        lb.putClientProperty(FlatClientProperties.STYLE, "font:$h1.font");
        initializeTable();
        loadCategoriesFromDatabase();
    }

    /**
     * Initializes the table model with Category ID and Category Name columns.
     */
    private void initializeTable() {
        String[] columnNames = {"Category ID", "Category Name"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false; // Prevents editing but allows selection
            }
        };
        tblCategories.setModel(tableModel);
        tblCategories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblCategories.setRowSelectionAllowed(true);
        tblCategories.setColumnSelectionAllowed(false);
    }

    /**
     * Loads categories from the database and populates the table.
     */
    private void loadCategoriesFromDatabase() {
        
        try {
            List<String> categories = ProductData.stringCategories;
            tableModel.setRowCount(0); // Clear existing rows
            if (categories != null) {
                for (String category : categories) {
                    tableModel.addRow(new Object[]{
                        categories
                    });
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error loading categories: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        lb = new javax.swing.JLabel();
        addCategory = new javax.swing.JButton();
        dltCategory = new javax.swing.JButton();
        editCategory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();

        lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb.setText("Item Categories");

        addCategory.setText("Add Category");
        addCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryActionPerformed(evt);
            }
        });

        dltCategory.setText("Delete Category");
        dltCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dltCategoryActionPerformed(evt);
            }
        });

        editCategory.setText("Edit Category");
        editCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCategoryActionPerformed(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {"Category ID", "Category Name"}
        ) {
            Class[] types = new Class [] {java.lang.String.class, java.lang.String.class};
            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCategories);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(addCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dltCategory)
                .addGap(18, 18, 18)
                .addComponent(editCategory)
                .addGap(299, 299, 299))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addCategory, dltCategory, editCategory});
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCategory)
                    .addComponent(dltCategory)
                    .addComponent(editCategory))
                .addGap(42, 42, 42))
        );
    }

    private void addCategoryActionPerformed(java.awt.event.ActionEvent evt) {
        // Get user input
        String catName = JOptionPane.showInputDialog(this, "Enter Category Name:");
        if (catName == null || catName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Category Name cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            List<Category> categoriesToSave = new ArrayList<>();

            categoriesToSave.add(new Category (catName));
            // Save to database
            ApiClient.storeCategory(categoriesToSave);

            // Add to table
            tableModel.addRow(new Object[]{catName});
            JOptionPane.showMessageDialog(this, "Category added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error adding category: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void dltCategoryActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tblCategories.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a category to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String catID = (String) tableModel.getValueAt(selectedRow, 0);
        String catName = (String) tableModel.getValueAt(selectedRow, 1);

        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete category: " + catName + "?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Note: Assuming ApiClient has a deleteCategory method
//                ApiClient.deleteCategory(catID);
                tableModel.removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "Category deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Error deleting category: " + e.getMessage(),
                        "Database Error",
                        JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    private void editCategoryActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tblCategories.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a category to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String oldCatID = (String) tableModel.getValueAt(selectedRow, 0);
        String oldCatName = (String) tableModel.getValueAt(selectedRow, 1);

        String newCatID = JOptionPane.showInputDialog(this, "Enter new Category ID:", oldCatID);
        if (newCatID == null || newCatID.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Category ID cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String newCatName = JOptionPane.showInputDialog(this, "Enter new Category Name:", oldCatName);
        if (newCatName == null || newCatName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Category Name cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            List<Category> categoriesToSave = new ArrayList<>();

            // Save to database
            ApiClient.storeCategory(categoriesToSave);

            // Update table
            tableModel.setValueAt(newCatID, selectedRow, 0);
            tableModel.setValueAt(newCatName, selectedRow, 1);
            JOptionPane.showMessageDialog(this, "Category updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error updating category: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    // Variables declaration
    private javax.swing.JButton addCategory;
    private javax.swing.JButton dltCategory;
    private javax.swing.JButton editCategory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb;
    private javax.swing.JTable tblCategories;
}