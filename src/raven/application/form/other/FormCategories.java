/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package raven.application.form.other;

import com.formdev.flatlaf.FlatClientProperties;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anasj
 */
public class FormCategories extends javax.swing.JPanel {

    /**
     * Creates new form UserPanel
     */
    public FormCategories() {
        initComponents();
        lb.putClientProperty(FlatClientProperties.STYLE, ""
                + "font:$h1.font");
        String[] columnNames = {"Category ID", "Category Name"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false; // Prevents editing but allows selection
            }
        };
        tblCategories.setModel(model);
        tblCategories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblCategories.setRowSelectionAllowed(true);
        tblCategories.setColumnSelectionAllowed(false);
        // Load data from database when the window opens
        loadUserTable();
    }

    private void loadUserTable() {
        DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb = new javax.swing.JLabel();
        addCategory = new javax.swing.JButton();
        dltCategory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        editCategory = new javax.swing.JButton();

        lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb.setText("Item Categories");

        addCategory.setText("Add Category");
        addCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryActionPerformed(evt);
            }
        });

        dltCategory.setText("Delete Category");
        dltCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dltCategoryActionPerformed(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category ID", "Category Name", "Is Active"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCategories);
        if (tblCategories.getColumnModel().getColumnCount() > 0) {
            tblCategories.getColumnModel().getColumn(2).setResizable(false);
        }

        editCategory.setText("Edit Category");
        editCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(addCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dltCategory)
                .addGap(18, 18, 18)
                .addComponent(editCategory)
                .addGap(299, 299, 299))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addCategory, dltCategory});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dltCategory)
                    .addComponent(addCategory)
                    .addComponent(editCategory))
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryActionPerformed
        // Get user input
        
        String catID = JOptionPane.showInputDialog(this, "Enter Category ID:");
        if (catID == null || catID.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Category ID cannot be empty.");
            return;
        }
        
        String catName = JOptionPane.showInputDialog(this, "Enter Category Name:");
        if (catName == null || catName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Category Name cannot be empty.");
            return;
        }

        String[] roles = {"Admin", "User"}; // Modify roles as per your system
        String role = (String) JOptionPane.showInputDialog(this, "Select role:",
                "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);

        if (role == null) {
            JOptionPane.showMessageDialog(this, "Role selection is required.");
            return;
        }

        // Call UserService to add user
        

       
    }//GEN-LAST:event_addCategoryActionPerformed

    private void dltCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dltCategoryActionPerformed
        int selectedRow = tblCategories.getSelectedRow(); // Get selected row index

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to edit.");
            return;
        }

        // Extract user details
        int userId = (int) tblCategories.getValueAt(selectedRow, 0); // ID (Hidden column)
        String oldUsername = (String) tblCategories.getValueAt(selectedRow, 1); // Existing Username
        String newRole = (String) tblCategories.getValueAt(selectedRow, 2); // Editable Role

        // Get new username from user input
        String newUsername = JOptionPane.showInputDialog(this, "Enter new username:", oldUsername);
        if (newUsername == null || newUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.");
            return;
        }

        
        // Get new password (optional)
        String newPassword = JOptionPane.showInputDialog(this, "Enter new password (Leave blank to keep current):");

        // If user cancels or doesn't enter a password, keep the old one
        if (newPassword == null || newPassword.trim().isEmpty()) {
            newPassword = "KEEP_OLD"; // Flag to indicate no change
        }

        String[] roles = {"Admin", "User"}; // Modify roles as per your system
        String role = (String) JOptionPane.showInputDialog(this, "Select role:",
                "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);

        if (role == null) {
            JOptionPane.showMessageDialog(this, "Role selection is required.");
            return;
        }
        // Update in database
        
    }//GEN-LAST:event_dltCategoryActionPerformed

    private void editCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editCategoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategory;
    private javax.swing.JButton dltCategory;
    private javax.swing.JButton editCategory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb;
    private javax.swing.JTable tblCategories;
    // End of variables declaration//GEN-END:variables
}
